/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.6
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Auth
} from '../model/auth'
import type {
  BodyAPILogin
} from '../model/bodyAPILogin'
import type {
  HTTPValidationError
} from '../model/hTTPValidationError'
import type {
  Token
} from '../model/token'
import type {
  User
} from '../model/user'



/**
 * Returns the current user profile
 * @summary Get Current User Profile
 */
export const aPIGetCurrentUserProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.get(
      `https://api.zrosty-hay.simple2b.net/api/users/me`,options
    );
  }


export const getAPIGetCurrentUserProfileQueryKey = () => {
    return [`https://api.zrosty-hay.simple2b.net/api/users/me`] as const;
    }

    
export const getAPIGetCurrentUserProfileQueryOptions = <TData = Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAPIGetCurrentUserProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>> = ({ signal }) => aPIGetCurrentUserProfile({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type APIGetCurrentUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>>
export type APIGetCurrentUserProfileQueryError = AxiosError<unknown>

/**
 * @summary Get Current User Profile
 */
export const useAPIGetCurrentUserProfile = <TData = Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAPIGetCurrentUserProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Logs in a user
 * @summary Login
 */
export const aPILogin = (
    bodyAPILogin: BodyAPILogin, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Token>> => {const formUrlEncoded = new URLSearchParams();
if(bodyAPILogin.grant_type !== undefined) {
 formUrlEncoded.append('grant_type', bodyAPILogin.grant_type)
 }
formUrlEncoded.append('username', bodyAPILogin.username)
formUrlEncoded.append('password', bodyAPILogin.password)
if(bodyAPILogin.scope !== undefined) {
 formUrlEncoded.append('scope', bodyAPILogin.scope)
 }
if(bodyAPILogin.client_id !== undefined) {
 formUrlEncoded.append('client_id', bodyAPILogin.client_id)
 }
if(bodyAPILogin.client_secret !== undefined) {
 formUrlEncoded.append('client_secret', bodyAPILogin.client_secret)
 }

    
    return axios.post(
      `https://api.zrosty-hay.simple2b.net/api/auth/login`,
      formUrlEncoded,options
    );
  }



export const getAPILoginMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPILogin>>, TError,{data: BodyAPILogin}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof aPILogin>>, TError,{data: BodyAPILogin}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof aPILogin>>, {data: BodyAPILogin}> = (props) => {
          const {data} = props ?? {};

          return  aPILogin(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type APILoginMutationResult = NonNullable<Awaited<ReturnType<typeof aPILogin>>>
    export type APILoginMutationBody = BodyAPILogin
    export type APILoginMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Login
 */
export const useAPILogin = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPILogin>>, TError,{data: BodyAPILogin}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getAPILoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Logs in a user
 * @summary Get Token
 */
export const aPIGetToken = (
    auth: Auth, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Token>> => {
    
    return axios.post(
      `https://api.zrosty-hay.simple2b.net/api/auth/token`,
      auth,options
    );
  }



export const getAPIGetTokenMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPIGetToken>>, TError,{data: Auth}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof aPIGetToken>>, TError,{data: Auth}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof aPIGetToken>>, {data: Auth}> = (props) => {
          const {data} = props ?? {};

          return  aPIGetToken(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type APIGetTokenMutationResult = NonNullable<Awaited<ReturnType<typeof aPIGetToken>>>
    export type APIGetTokenMutationBody = Auth
    export type APIGetTokenMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Get Token
 */
export const useAPIGetToken = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPIGetToken>>, TError,{data: Auth}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getAPIGetTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary List Endpoints
 */
export const aPIListEndpoints = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.get(
      `https://api.zrosty-hay.simple2b.net/api/list-endpoints/`,options
    );
  }


export const getAPIListEndpointsQueryKey = () => {
    return [`https://api.zrosty-hay.simple2b.net/api/list-endpoints/`] as const;
    }

    
export const getAPIListEndpointsQueryOptions = <TData = Awaited<ReturnType<typeof aPIListEndpoints>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof aPIListEndpoints>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAPIListEndpointsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof aPIListEndpoints>>> = ({ signal }) => aPIListEndpoints({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof aPIListEndpoints>>, TError, TData> & { queryKey: QueryKey }
}

export type APIListEndpointsQueryResult = NonNullable<Awaited<ReturnType<typeof aPIListEndpoints>>>
export type APIListEndpointsQueryError = AxiosError<unknown>

/**
 * @summary List Endpoints
 */
export const useAPIListEndpoints = <TData = Awaited<ReturnType<typeof aPIListEndpoints>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof aPIListEndpoints>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAPIListEndpointsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



