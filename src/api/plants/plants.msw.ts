/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.11
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  PagePlant,
  Photo,
  PlantCategory,
  PlantDetail
} from '.././model'

export const getAPIGetAllMock = (overrideResponse: any = {}): PagePlant => ({items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({careType: faker.helpers.arrayElement(Object.values(CareType)), isSunLoving: faker.datatype.boolean(), maxSize: faker.number.int({min: undefined, max: undefined}), maxTemperature: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{}]), minSize: faker.number.int({min: undefined, max: undefined}), minTemperature: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{}]), name: faker.word.sample(), photo: faker.helpers.arrayElement([{originalName: faker.helpers.arrayElement([faker.word.sample(),{}]), urlPath: faker.word.sample(), ...overrideResponse},{}]), uuid: faker.word.sample(), watering: faker.helpers.arrayElement(Object.values(CareType)), ...overrideResponse})), page: faker.helpers.arrayElement([faker.number.int({min: 1, max: undefined}),{}]), pages: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}),{}]), undefined]), size: faker.helpers.arrayElement([faker.number.int({min: 1, max: undefined}),{}]), total: faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}),{}]), ...overrideResponse})

export const getAPIGetCategoriesMock = (overrideResponse: any = {}): PlantCategory[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.word.sample(), svgIcon: faker.word.sample(), uuid: faker.word.sample(), ...overrideResponse})))

export const getAPIGetMock = (overrideResponse: any = {}): PlantDetail => ({features: faker.word.sample(), generalInfo: faker.word.sample(), humidityPercentage: faker.number.int({min: undefined, max: undefined}), isSunLoving: faker.datatype.boolean(), maxSize: faker.number.int({min: undefined, max: undefined}), minSize: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), temperatureInfo: faker.word.sample(), uuid: faker.word.sample(), wateringInfo: faker.word.sample(), waterVolume: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getAPIGetPlantPhotosMock = (overrideResponse: any = {}): Photo[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({originalName: faker.helpers.arrayElement([faker.word.sample(),{}]), urlPath: faker.word.sample(), ...overrideResponse})))


export const getAPIGetAllMockHandler = (overrideResponse?: PagePlant) => {
  return http.get('*/api/plants/', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getAPIGetAllMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getAPIGetCategoriesMockHandler = (overrideResponse?: PlantCategory[]) => {
  return http.get('*/api/plants/categories', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getAPIGetCategoriesMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getAPIGetMockHandler = (overrideResponse?: PlantDetail) => {
  return http.get('*/api/plants/:uuid', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getAPIGetMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getAPIGetPlantPhotosMockHandler = (overrideResponse?: Photo[]) => {
  return http.get('*/api/plants/:uuid/photos', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getAPIGetPlantPhotosMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getPlantsMock = () => [
  getAPIGetAllMockHandler(),
  getAPIGetCategoriesMockHandler(),
  getAPIGetMockHandler(),
  getAPIGetPlantPhotosMockHandler()
]
